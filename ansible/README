# Ansible

"Ansible is an automation engine that allows you to either statically or
dynamically specify which machines to target, and automatically run commands
across those machines."

Ansible is a configuration management and provisioning tool, similar to Chef, Puppet or Salt.

- It's just SSH
- Easy to convert Bash scripts into Ansible Tasks
- Ansible automates getting context before running Task
- Ansible Tasks are idempotent
- Ansible use 'Facts', which are system and environment information that it
  gathers ("Context") before running Tasks
- Ansible uses these facts to check state and see if it needs to change
  anything in order to get the desired outcome. This makes it safe to run
  Ansible Tasks against a server over and over again.
- Agentless
- Can be run on any machine that has got Ansible installed, but is usually run
  from a central server

## Steps

### Install

```
$ sudo pip install virtualenv
$ virtualenv venv
$ . venv/bin/activate
$ pip install ansible
```

### Managing Servers: inventory

An inventory file defines which servers that we will be managing. It can be
named anything, but 'hosts' is a common name.

Within the `hosts` file, we define some severs to manage. This is an example
with two machines grouped under the label `web`. The label is arbitrary.

```
[web]
192.168.1.2
192.168.1.2
```

The inventory can also be dynamic (a python script), and create ranges of
hosts etc. Ansible can be run on the local machine or against hosts from an
inventory file. Both are valid, but the main way is against remote hosts.

It is possible to specify a user for a specific host like this:

```
[vagrant]
192.168.126.151 ansible_user=vagrant
```

#### SSH Keys

Ansible can use both ssh keys and passwords. It seems like ssh keys should be
the default setting.

```
$ vagrant ssh-config
...
$ ssh-add ssh-add /Users/folkol/code/tutorials/ansible/.vagrant/machines/default/virtualbox/private_key
$ ansible all -i hosts -m command -a 'hostname' -u vagrant
```

```
$ ansible-playbook --private-key=~/.vagrant.d/insecure_private_key -u vagrant -i .vagrant/provisioners/ansible/inventory/vagrant_ansible_inventory playbook.yml
```

### Running commands

```
$ cat hosts
[remote]
192.168.126.151 ansible_user=vagrant

[local]
127.0.0.1
```

Run simple command against a host:

```
$ ansible -i hosts --connection=local local -m ping
127.0.0.1 | SUCCESS => {
    "changed": false,
    "ping": "pong"
}
```

```
$ ansible -i hosts remote -m ping
192.168.126.151 | SUCCESS => {
    "changed": false,
    "ping": "pong"
}
```

## References

https://serversforhackers.com/c/an-ansible2-tutorial

## Notes

Need Python + SSH
Can we prompt for confirmation for certain tags, say production?
Playbook are composable, a playbook can include other playbooks.
ansible-{galaxy install, playbook, foobar}
Ansible abstractions / concepts?

## Glossary

Task (Some command that alter the machine.)
Context (Set of Facts gathered before running a Task)
Fact (System and environment information)
Playbook
Module
Inventory Files (static or dynamic)
Provision
