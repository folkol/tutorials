# Ansible

"Ansible is an automation engine that allows you to either statically or
dynamically specify which machines to target, and automatically run commands
across those machines."

Ansible is a configuration management and provisioning tool, similar to Chef, Puppet or Salt.

- It's just SSH
- Easy to convert Bash scripts into Ansible Tasks
- Ansible automates getting context before running Task
- Ansible Tasks are idempotent
- Ansible use 'Facts', which are system and environment information that it
  gathers ("Context") before running Tasks
- Ansible uses these facts to check state and see if it needs to change
  anything in order to get the desired outcome. This makes it safe to run
  Ansible Tasks against a server over and over again.
- Agentless
- Can be run on any machine that has got Ansible installed, but is usually run
  from a central server

## Steps

### Install

```
$ sudo pip install virtualenv
$ virtualenv venv
$ . venv/bin/activate
$ pip install ansible
```

### Managing Servers: inventory

An inventory file defines which servers that we will be managing. It can be
named anything, but 'hosts' is a common name.

Within the `hosts` file, we define some severs to manage. This is an example
with two machines grouped under the label `web`. The label is arbitrary.

```
[web]
192.168.1.2
192.168.1.2
```

The inventory can also be dynamic (a python script), and create ranges of
hosts etc. Ansible can be run on the local machine or against hosts from an
inventory file. Both are valid, but the main way is against remote hosts.

It is possible to specify a user for a specific host like this:

```
[vagrant]
192.168.126.151 ansible_user=vagrant
```

#### SSH Keys

Ansible can use both ssh keys and passwords. It seems like ssh keys should be
the default setting.

```
$ vagrant ssh-config
...
$ ssh-add ssh-add /Users/folkol/code/tutorials/ansible/.vagrant/machines/default/virtualbox/private_key
$ ansible all -i hosts -m command -a 'hostname' -u vagrant
```

```
$ ansible-playbook --private-key=~/.vagrant.d/insecure_private_key -u vagrant -i .vagrant/provisioners/ansible/inventory/vagrant_ansible_inventory playbook.yml
```

#### SSH Options

It is possible to specify SSH Options at the command line:

```
ansible -i ./hosts --ask-pass --ssh-extra-args='-o "PubkeyAuthentication=no"' all -m ping
```

### Running commands

```
$ cat hosts
[remote]
192.168.126.151 ansible_user=vagrant

[local]
127.0.0.1
```

Run simple command against a host:

```
$ ansible -i hosts --connection=local local -m ping
127.0.0.1 | SUCCESS => {
    "changed": false,
    "ping": "pong"
}
```

```
$ ansible -i hosts remote -m ping
192.168.126.151 | SUCCESS => {
    "changed": false,
    "ping": "pong"
}
```

### Modules

Modules are the way Ansible carries out its tasks. A module can use the
current context ("Facts") to determine whether it has to execute a task or
not.

Notice the result when running the Task a second time.

```
$ ansible -i ./hosts remote -b --become-user=root -m apt -a 'name=nginx state=installed update_cache=true'
192.168.126.151 | SUCCESS => {
    "cache_update_time": 1519648263,
    ...
}

$ ansible -i ./hosts remote -b --become-user=root -m apt -a 'name=nginx state=installed update_cache=true'
192.168.126.151 | SUCCESS => {
    "cache_update_time": 1519648312,
    "cache_updated": true,
    "changed": false
}
```

### Playbooks

We can configure the above command in a `playbook file` instead.

```
$ cat nginx.yml
---
- hosts: remote
  become: yes
  become_user: root
  tasks:
      - name: Install Nginx
        apt:
            name: nginx
            state: installed
            update_cache: true
```

```
$ ansible-playbook -i hosts nginx.yml
...
PLAY RECAP ****************************************************************************************************************************
192.168.126.151            : ok=2    changed=0    unreachable=0    failed=0
```

### Handlers

Handlers are tasks that will only run if notified by another task, and also
only run once after the ordinary tasks are completed. (Like restart service
etc.)

### Roles

A playbook can include additinal tasks, configuration etc, from `role files`
in a known directory structure.

```
roles
  rolename
   - files
   - handlers
   - meta
   - templates
   - tasks
   - vars
```

Example:

```
site.yml
webservers.yml
fooservers.yml
roles/
   common/
     tasks/
     handlers/
     files/
     templates/
     vars/
     defaults/
     meta/
   webservers/
     tasks/
     defaults/
     meta/
```

In this example, site.yml can include stuff from `roles/common` by declaring
that it belongs to a role named `common`.

Ansible will search for files called `main.yaml` in each location, and include
them into any playbook that declares that role.

#### ansible-galaxy

Ansible galaxy can be used to install roles from Ansible's public repository,
or save roles to that repository. It can also be used to bootstrap a new role
on the local machine.

```
mkdir roles
cd roles
$ ansible-galaxy init nginx
- nginx was created successfully
(venv) master$ t
.
└── nginx
    ├── README.md
    ├── defaults
    │   └── main.yml
    ├── files
    ├── handlers
    │   └── main.yml
    ├── meta
    │   └── main.yml
    ├── tasks
    │   └── main.yml
    ├── templates
    ├── tests
    │   ├── inventory
    │   └── test.yml
    └── vars
        └── main.yml

9 directories, 8 files
```

Files: Files that should be copied into the hosts. (e.g.
https://github.com/h5bp/server-configs-nginx/tree/master/h5bp)
Handler: Move the handlers from the nginx.yaml to this file.
Meta: Role metadata, including dependencies.

Example:

```
---
dependencies:
  - { role: ssl }
```

Template:

Files that will be run through Jinja2. Similar to `Files`, this directory will
not include a `main.yaml`. Files should end in `.j2`.

Vars:

Variables that can be used elsewhere inside this role. They can be encrypted
with `ansible-vault`, if they are secrets.

### Facts and Vault

Skipped this, but read up on these later.

### Recap

Installed Ansible
Configured Ansible Inventory
Ran idempotent Ad-Hoc Commands on multiple serveres simultaneously.
Created basic Playbook to run multiple Tasks, using Handlers.
Abstracted the Tasks into a Role to Keep everything Nginx-related organized
    - generated the role with ansible-galaxy
    - saw how to set dependencies
    - saw how to register Task dependencies
    - saw how to use more templates, files and variables in out Tasks
Saw how to incorporate Ansible Facts
Saw how to use Ansible Vault to add secure variables

## References

https://serversforhackers.com/c/an-ansible2-tutorial

## Notes

Need Python + SSH
Can we prompt for confirmation for certain tags, say production?
Playbook are composable, a playbook can include other playbooks.
ansible-{galaxy install, playbook, foobar}
Ansible abstractions / concepts?

## Glossary

Task (Some command that alter the machine.)
Context (Set of Facts gathered before running a Task)
Fact (System and environment information)
Playbook (List of Tasks to run as well as other configuration)
Module (Tasks live inside modules. The module can use available context
("Facts") to determine whether to run a certain Task or not.)
Inventory Files (static or dynamic)
Provision (Setup a machine, install commands and make configuration options)
Role (Load additinal tasks, configuration etc from role files)
